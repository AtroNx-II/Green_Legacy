
class PowerTimeFreezer2 : Powerup
{
	Default
	{
		Powerup.Duration -12;
	}
	
	//===========================================================================
	//
	// InitEffect
	//
	//===========================================================================

	override void InitEffect()
	{
		int freezemask;

		Super.InitEffect();

		if (Owner == null || Owner.player == null)
			return;

		// When this powerup is in effect, pause the music.
		S_PauseSound(true, true);

		// Give the player and his teammates the power to move when time is frozen.
		freezemask = 1 << Owner.PlayerNumber();
		Owner.player.timefreezer |= freezemask;
		for (int i = 0; i < MAXPLAYERS; i++)
		{
			if (playeringame[i] &&
				players[i].mo != null &&
				players[i].mo.IsTeammate(Owner)
			   )
			{
				players[i].timefreezer |= freezemask;
			}
		}

		// [RH] The effect ends one tic after the counter hits zero, so make
		// sure we start at an odd count.
		EffectTics += !(EffectTics & 1);
		if ((EffectTics & 1) == 0)
		{
			EffectTics++;
		}
		// Make sure the effect starts and ends on an even tic.
		if ((level.time & 1) == 0)
		{
			level.frozen = true;;
		}
		else
		{
			// Compensate for skipped tic, but beware of overflow.
			if(EffectTics < 0x7fffffff)
				EffectTics++;
		}
	}

	//===========================================================================
	//
	// APowerTimeFreezer :: DoEffect
	//
	//===========================================================================

	override void DoEffect()
	{
		Super.DoEffect();
		// [RH] Do not change LEVEL_FROZEN on odd tics, or the Revenant's tracer
		// will get thrown off.
		// [ED850] Don't change it if the player is predicted either.
		if (level.time & 1 || (Owner != null && Owner.player != null && Owner.player.cheats & CF_PREDICTING))
		{
			return;
		}
		// [RH] The "blinking" can't check against EffectTics exactly or it will
		// never happen, because InitEffect ensures that EffectTics will always
		// be odd when level.time is even.
		level.frozen = ( EffectTics > 4*32 
			|| (( EffectTics > 3*32 && EffectTics <= 4*32 ) && ((EffectTics + 1) & 3) != 0 )
			|| (( EffectTics > 2*32 && EffectTics <= 3*32 ) && ((EffectTics + 1) & 3) != 0 )
			|| (( EffectTics >   32 && EffectTics <= 2*32 ) && ((EffectTics + 1) & 3) != 0 )
			|| (( EffectTics >    0 && EffectTics <= 1*32 ) && ((EffectTics + 1) & 1) != 0 ));
	}

	//===========================================================================
	//
	// APowerTimeFreezer :: EndEffect
	//
	//===========================================================================

	override void EndEffect()
	{
		Super.EndEffect();

		// If there is an owner, remove the timefreeze flag corresponding to
		// her from all players.
		if (Owner != null && Owner.player != null)
		{
			int freezemask = ~(1 << Owner.PlayerNumber());
			for (int i = 0; i < MAXPLAYERS; ++i)
			{
				players[i].timefreezer &= freezemask;
			}
		}

		// Are there any players who still have timefreezer bits set?
		for (int i = 0; i < MAXPLAYERS; ++i)
		{
			if (playeringame[i] && players[i].timefreezer != 0)
			{
				return;
			}
		}

		// No, so allow other actors to move about freely once again.
		level.frozen = false;

		// Also, turn the music back on.
		S_ResumeSound(false);
	}
}

class HOOKSHOT : Actor
{


    default
    {
    Species "Playerside";
	height 12;
	radius 12;
	speed 45;
	scale 0.5;
	Damage 0;
	Projectile;
	Renderstyle "Translucent";
	CameraHeight 32;
	+NOGRAVITY
	+MTHRUSPECIES 
	+SKYEXPLODE
    }

States
{
Spawn:
MIS2 A 0 bright;
MMIS B 0 bright;
SHK1 AAAA 1 bright  A_SpawnActorLine("HOOKROPE2",self.pos,target.pos+(0,0,target.height*0.5),5);
goto Death2;
Death2:
SHK1 A 1 A_GiveToTarget("HOOKnotattached",1);
stop;
Crash:
XDeath:
EMBX A 0 bright A_SpawnItemEx("Emily_BulletSpark",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION );
TNT1 A 0 A_PlaySound("hookhit", 7,1.0,0,ATTN_NONE);
TNT1 A 0 A_JumpIfInTargetInventory("HookCancel",1,"RemoveHook");
MIS2 A 0 A_GiveToTarget("HOOKEND",1);
MIS2 A 0 A_SpawnActorLine("HOOKROPE2",self.pos,target.pos+(0,0,target.height*0.5),5);
stop;
Death:
 
EMBX A 0 bright A_SpawnItemEx("Emily_BulletSpark",0,0,0,0,0,0,0,SXF_NOCHECKPOSITION );
TNT1 A 0 A_PlaySound("hookhit", 7,1.0,0,ATTN_NONE);
TNT1 A 0 A_JumpIfInTargetInventory("HookCancel",1,"RemoveHook");
MIS2 A 0 A_GiveToTarget("HOOKEND",1);
SHK1 A 1 bright
{
 A_SpawnActorLine("HOOKROPE2",self.pos,target.pos+(0,0,target.height*0.5),5);
ACS_NamedExecuteAlways("Hook_HitWall", 0, 0, 0, 0);
}
GOTO DEATH+2;

RemoveHook:
TNT1 A 0 A_PlaySound("hookcanc", 7,1.0,0,ATTN_NONE);
SHK1 A 1 A_TakeFromTarget("HOOKEND",1);
stop;
}

action void A_SpawnActorLine(string classname, Vector3 pointA, Vector3 pointB, double units = 1)
{
    // get a vector pointing from A to B
    let pointAB = pointB - pointA;
    
    // get distance
    let dist = pointAB.Length();
    
    // normalize it
    pointAB /= dist == 0 ? 1 : dist;
    
    // iterate in units of 'units'
    for (double i = 0; i < dist; i += units)
    {
        // we can now use 'pointA + i * pointAB' to
        // get a position that is 'i' units away from
        // pointA, heading in the direction towards pointB
        let position = pointA + i * pointAB;
        Spawn(classname, position);
    }
}
}