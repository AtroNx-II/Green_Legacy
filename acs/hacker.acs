#library "hacker"
#include "zcommon.acs"

str UPPERimage[72] = {"CATSH00","CATSH01","CATSH02","CATSH03",
"CATSH04","CATSH05","CATSH06","CATSH07","CATSH08","CATSH09","CATSH10","CATSH11","CATSH12",
"CATSH13","CATSH14","CATSH15","CATSH16","CATSH17","CATSH18","CATSH19","CATSH20",
"CATSH21","CATSH22","CATSH23","CATSH24","CATSH25","CATSH26","CATSH27"
,"CATSH28","CATSH29","CATSH30","CATSH31","CATSH32","CATSH33","CATSH34"
,"CATSH35","CATSH36","CATSH37","CATSH38","CATSH39","CATSH40","CATSH41","CATSH42"
,"CATSH43","CATSH44","CATSH45","CATSH46","CATSH47","CATSH48","CATSH49","CATSH50"
,"CATSH51","CATSH52","CATSH53","CATSH54","CATSH55","CATSH56","CATSH57","CATSH58"
,"CATSH59","CATSH60","CATSH61","CATSH62","CATSH63","CATSH64","CATSH65","CATSH66","CATSH67"
,"CATSH68","CATSH69","CATSH70","CATSH71"};
str Chargeimage[16] = {"EBFC000","EBFC001","EBFC002","EBFC003","EBFC004","EBFC005","EBFC006","EBFC007","EBFC008","EBFC009",
"EBFC010","EBFC011","EBFC012","EBFC013","EBFC014","EBFC015",};

script "DamageFactorcontrol" (int onoff)
{
If(onoff ==0)
{
SetActorProperty(0,APROP_DamageFactor,0.5);
}
else
{
SetActorProperty(0,APROP_DamageFactor,1.0);
}
}

script "Beep" (int type)
{
if(Type==1)
{
If(Checkinventory("Waitingforrestart")==0)
{
LocalAmbientsound("low50",127);
Acs_NamedExecute("Beepcheck",0,0,0,0);
GiveInventory("Waitingforrestart",1);
Delay(105);
}

}
else
{
If(Checkinventory("Waitingforrestart2")==0)
{
LocalAmbientsound("low25",127);
Acs_NamedExecute("Beepcheck2",0,0,0,0);
GiveInventory("Waitingforrestart2",1);
Delay(105);
}
}
Delay(1);
}

script "Beep2" (void)
{
If(Checkinventory("Cutsceneblock")==0)
{
If(Checkinventory("Plasmagauge")>101 && Checkinventory("Plasmagauge")<200)
{
LocalAmbientsound("chargef",127);
}
else If(Checkinventory("Plasmagauge")>0 && Checkinventory("Plasmagauge")<100)
{
LocalAmbientsound("chargeE",127);
}
Else
{}
}
delay(105);
}

script "Beepcheck" (void)
{
If(Checkinventory("Fire_pressed")==0)
{
TakeInventory("Waitingforrestart",1);
Terminate;
}
else
{

}
Delay(1);
restart;
}
script "Beepcheck2" (void)
{
If(Checkinventory("Fire_pressed")==0)
{
TakeInventory("Waitingforrestart2",1);
Terminate;
}
else
{

}
Delay(1);
restart;
}
script "ChargeComplete" (void)
{

If(Checkinventory("PlayingEmily")== 0)
{
If(Checkinventory("Cutsceneblock")== 0)
{

LocalAmbientsound("CHGCP",127);
    int Imagenum;
    For(Imagenum = 0; Imagenum <= 15; Imagenum += 1)
    {
            Setfont(Chargeimage[Imagenum]);
      If(Checkinventory("Transition01")== 1 ||Checkinventory("Transition02")== 1)
      {
            HudMessage(s:""; HUDMSG_ADDBLEND, 2017,CR_UNTRANSLATED, 480.0,578.0, 0.1);
      }
      else
      {
            HudMessage(s:"A"; HUDMSG_ADDBLEND, 2017,CR_UNTRANSLATED, 480.0,578.0, 0.1);
      }

       SetHUDSize(960, 640, TRUE);
            Delay(1);
    }
    }
  }
}
script "AutoSaving" (void)
{
  SetHUDSize(1600, 900, TRUE);
  SetFont("LDIC01");
  HudMessage(s:"A";HUDMSG_FADEINOUT, 20002, -1, 1220.0, 820.0,2.0,0.3,0.3);
  SetHUDSize(640, 440, TRUE);
  SetFont("font2");
  HudMessage(s:"CHECKPOINT REACHED";HUDMSG_FADEINOUT, 20000, -1, 500.5, 400.0,2.0,0.3,0.3);
Autosave();
}
script "FoundSecret" (void)
{
  SetHUDSize(800, 600, TRUE);
  SetFont("font2");
  HudMessage(s:"SECRET REVEALED!";HUDMSG_PLAIN, 20001, -1, 400.0, 300.0,0.1);
  Delay(5);
  HudMessage(s:"SECRET REVEALED";HUDMSG_PLAIN, 20001, -1, 400.0, 300.0,0.1);
  Delay(5);
  HudMessage(s:"SECRET REVEALED";HUDMSG_PLAIN, 20001, -1, 400.0, 300.0,0.1);
  Delay(5);
  HudMessage(s:"SECRET REVEALED";HUDMSG_PLAIN, 20001, -1, 400.0, 300.0,0.1);
  Delay(5);
  HudMessage(s:"SECRET REVEALED";HUDMSG_PLAIN, 20001, -1, 400.0, 300.0,0.1);
  Delay(5);
  HudMessage(s:"SECRET REVEALED";HUDMSG_PLAIN, 20001, -1, 400.0, 300.0,0.1);
  Delay(5);

}
script "NavigatorScript" (int nnum)
{

SetActivator(0,AAPTR_TARGET);

  IF(nnum==5) //left
  {

    SetHUDSize(400, 270, TRUE);
    SetFont("NL");
    HudMessage(s:"A";HUDMSG_PLAIN, 9000, -1, 200.0, 135.0,0.1);
    Delay(5);
  }
  else IF(nnum==6) //right
  {
    SetHUDSize(400, 270, TRUE);
    SetFont("NR");
    HudMessage(s:"A";HUDMSG_PLAIN, 9000, -1, 200.0, 135.0,0.1);
    Delay(5);
  }
  else IF(nnum==3) //up
  {

    SetHUDSize(400, 270, TRUE);
    SetFont("NAVID");
    HudMessage(s:"A";HUDMSG_PLAIN, 9000, -1, 200.0, 135.0,0.1);
    Delay(5);
  }
  else IF(nnum==4) //down
  {

    SetHUDSize(400, 270, TRUE);
    SetFont("NAVIU");
    HudMessage(s:"A";HUDMSG_PLAIN, 9000, -1, 200.0, 135.0,0.1);
    DELAY(5);
  }
  else
  {
  }

}
script "PlatFormMoverV" (int Distance,int Speed,int Plattid) 
{

    int RESTARTANIMATION,MoveDistance,platform_Height,platform_Radius,player_radius,player_height,FDiffDist,Reverse;
    IF(RESTARTANIMATION==0) //PREVENT CHANGE TID CONTINUOSLY 
    {
  
  Thing_ChangeTID(0,Plattid);
        platform_Height = GetActorProperty(0, APROP_Height)+GetActorZ(0);
        platform_Radius = GetActorProperty(0, APROP_Radius)+player_radius;
        player_radius = GetActorProperty(APROP_TargetTID, APROP_Radius)/2;
    player_height = GetActorProperty(APROP_TargetTID, APROP_Height);
    }
    

    MoveDistance = Distance;
    Until(MoveDistance==0)
    {
    If(GetActorVelZ(Plattid)==0)
    {
    }
    else
    {
    MoveDistance--;
    }
    If(Reverse==1)
    {
    SetActorVelocity(Plattid,0,0,-Speed*1.0,False,False);
    }
    else
    {
    SetActorVelocity(Plattid,0,0,Speed*1.0,False,False);
    }
    Delay(1);
    }
    Thing_Stop(0);
        Delay(35);

RESTARTANIMATION=1;
    If(Reverse==0){Reverse=1;}
    else{Reverse=0;
}


          restart;
}

script "PlatFormMoverH" (int Distance,int Speed,int Plattid ) 
{

    int RESTARTANIMATION,MoveDistance,platform_Height,platform_Radius,player_radius,player_height,FDiffDist,Reverse;
    IF(RESTARTANIMATION==0) //PREVENT CHANGE TID CONTINUOSLY 
    {
  
  Thing_ChangeTID(0,Plattid);
        platform_Height = GetActorProperty(0, APROP_Height)+GetActorZ(0);
        platform_Radius = GetActorProperty(0, APROP_Radius)+player_radius;
        player_radius = GetActorProperty(APROP_TargetTID, APROP_Radius)/2;
    player_height = GetActorProperty(APROP_TargetTID, APROP_Height);
    }
    

    MoveDistance = Distance;
    Until(MoveDistance==0)
    {
    If(GetActorVelx(Plattid)==0)
    {
    }
    else
    {
    MoveDistance--;
    }
    If(Reverse==1)
    {
    SetActorVelocity(Plattid,-Speed*1.0,0,0,False,False);
    }
    else
    {
    SetActorVelocity(Plattid,Speed*1.0,0,0,False,False);
    }
    Delay(1);
    }
    Thing_Stop(0);
        Delay(35);

RESTARTANIMATION=1;
    If(Reverse==0){Reverse=1;}
    else{Reverse=0;
}

          restart;
}
script "PlatFormPhysicsV" (int Plattid)
{

 int RESTARTANIMATION,FirstX,SecondX,FirstY,SecondY,FirstZ,SecondZ,Xdiff,Ydiff,Zdiff,platform_Height,platform_Radius,player_radius,player_height;
    IF(RESTARTANIMATION==0) //PREVENT CHANGE TID CONTINUOSLY 
    {
                  platform_Height = GetActorProperty(Plattid, APROP_Height)+GetActorZ(Plattid);
        platform_Radius = GetActorProperty(Plattid, APROP_Radius)+player_radius;
        player_radius = GetActorProperty(APROP_TargetTID, APROP_Radius)/2;
    player_height = GetActorProperty(APROP_TargetTID, APROP_Height);
        Thing_ChangeTID(0,Plattid);
     int playerangle = GetActorAngle(ActivatorTid()) >> 8;
     int playerheightwithZ = GetActorProperty(ActivatorTid(), APROP_Height)+GetActorZ(ActivatorTid());
    SetActivator(1001+PlayerNumber(), AAPTR_PLAYER1);
    
    RESTARTANIMATION=1;
    }
    FirstX=GetActorX(Plattid); /////store platform's position
    FirstY=GetActorY(Plattid);
    FirstZ=GetActorProperty(Plattid, APROP_Height)+GetActorZ(Plattid);
        Delay(1); 
    SecondX=GetActorX(ActivatorTid()); /////store player's current position
    SecondY=GetActorY(ActivatorTid());
    SecondZ=GetActorZ(ActivatorTid())-GetActorFloorZ(ActivatorTid());
    Xdiff = FirstX-SecondX;
    Ydiff = FirstY-SecondY;
    Zdiff = FirstZ-SecondZ;
  SetHudSize(640,400,1);
          HudMessage(s:"  - ", f:GetActorX(Plattid)-GetActorX(ActivatorTid()),s:" platformdistance\n",
                              s:"  - ", f:platform_Radius,s:" platformradius\n";
         HUDMSG_PLAIN, 10, CR_UNTRANSLATED, 4.0, 72.0, 0.1);
    if(GetActorX(Plattid)-GetActorX(ActivatorTid())< platform_Radius && platform_Height==GetActorZ(ActivatorTid()))
        {
            SetActorVelocity(ActivatorTid(),GetActorVelX(ActivatorTid()),GetActorVelY(ActivatorTid()),GetActorVelZ(Plattid),False,False);
        
        }
    else
    {}
    }
    
script "PlatFormPhysicsH" (int Plattid)
{

 int RESTARTANIMATION,FirstX,SecondX,FirstY,SecondY,FirstZ,SecondZ,Xdiff,Ydiff,Zdiff,platform_Height,platform_Radius,player_radius,player_height;
    IF(RESTARTANIMATION==0) //PREVENT CHANGE TID CONTINUOSLY 
    {
                  platform_Height = GetActorProperty(Plattid, APROP_Height)+GetActorZ(Plattid);
        platform_Radius = GetActorProperty(Plattid, APROP_Radius)+player_radius;
        player_radius = GetActorProperty(APROP_TargetTID, APROP_Radius)/2;
    player_height = GetActorProperty(APROP_TargetTID, APROP_Height);
        Thing_ChangeTID(0,Plattid);
     int playerangle = GetActorAngle(ActivatorTid()) >> 8;
     int playerheightwithZ = GetActorProperty(ActivatorTid(), APROP_Height)+GetActorZ(ActivatorTid());
    SetActivator(1001+PlayerNumber(), AAPTR_PLAYER1);
    
    RESTARTANIMATION=1;
    }
    FirstX=GetActorX(Plattid); /////store platform's position
    FirstY=GetActorY(Plattid);
    FirstZ=GetActorProperty(Plattid, APROP_Height)+GetActorZ(Plattid);
        Delay(1); 
    SecondX=GetActorX(ActivatorTid()); /////store player's current position
    SecondY=GetActorY(ActivatorTid());
    SecondZ=GetActorZ(ActivatorTid())-GetActorFloorZ(ActivatorTid());
    Xdiff = FirstX-SecondX;
    Ydiff = FirstY-SecondY;
    Zdiff = FirstZ-SecondZ;
  SetHudSize(640,400,1);
          HudMessage(s:"  - ", f:GetActorX(Plattid)-GetActorX(ActivatorTid()),s:" platformdistance\n",
                              s:"  - ", f:platform_Radius,s:" platformradius\n";
         HUDMSG_PLAIN, 10, CR_UNTRANSLATED, 4.0, 72.0, 0.1);
    if(GetActorX(Plattid)-GetActorX(ActivatorTid())< platform_Radius && platform_Height==GetActorZ(ActivatorTid()))
        {
SetActorPosition(ActivatorTid(),GetActorX(Plattid)-Xdiff,GetActorY(Plattid)-Ydiff,GetActorZ(ActivatorTid()),False);
        }
    else
    {}
    }
    
script "CheckSupporterSkill" ENTER
{
        int buttons; int heldButtons; int newButtons; int oldButtons;
 while (TRUE)
 {
 int pln = PlayerNumber(); // this is obligitory by now
 int playerAngle;  int playerAngle2;
 bool bInMidAir; int playerHeight; int playerJumpZ;
 int playerSpeed; int dodgeSpeed;  int dodgeSpeed2;
 heldButtons =  GetPlayerInput(-1, MODINPUT_OLDBUTTONS);
 buttons =     GetPlayerInput(-1, MODINPUT_BUTTONS);
 newButtons = (buttons ^ heldButtons) & buttons;
 oldButtons = (buttons ^ heldButtons) & heldButtons;
 INT FLOORHEIGHT = GETACTORZ(0)-GETACTORFLOORZ(0);
 int cattyhealth,m16health;

 if (GetActorProperty (0, APROP_HEALTH) > 0 && GameType () != GAME_TITLE_MAP )
 {
    IF(newButtons == BT_USER1)
   {
    If(CheckInventory("HaveEmily"))
   {
  
    If(CheckInventory("LoadingEmily"))  // check inventory forchange charecter
   {
    If(CheckInventory("PlayingEmily")==0 ) 
   {
  ACS_NamedExecute("UnMorphEmily",0,1,0,0);
  }
  Else
  {
  ACS_NamedExecute("UnMorphEmily",0,0,0,0);
  }
   }
   else
   {
     Giveinventory("Support_Emily",1);
   }

    }
  Else If(CheckInventory("HaveCatty"))
   {

    If(CheckInventory("LoadingCatty"))
   {
    If(CheckInventory("PlayingCatty")==0)
   {
       If(CheckInventory("Cattyonce")==0)
   {
   Giveinventory("Cattyonce",1);
    cattyhealth = 100; 
  }
  else
  {

   }
     Takeinventory("Fire_Pressed",1);
            Takeinventory("ShieldOnline",1);
       Takeinventory("ShieldFinished",1);
       Takeinventory("ShieldPowerGiver",1);
     Takeinventory("ShieldPower",1);
      m16health = GetActorProperty (0, APROP_HEALTH);
 Delay(1);
       Takeinventory("ShieldPowerGiver",1);
     Takeinventory("ShieldPower",1);
   MorphActor(1001+PlayerNumber(),"CattyPlayer","",0x7fffffff,MRF_UNDOALWAYS|MRF_WHENINVULNERABLE ,"NoFlash","NoFlash");
Thing_ChangeTID(0,1001+PlayerNumber());
Delay(1);
  SetActorProperty (0, APROP_HEALTH,cattyhealth);
ACS_NamedExecuteAlways("InvulTime",0,10,0,0);
   Giveinventory("PlayingCatty",1);
     Takeinventory("Fire_Pressed",1);
  SpawnForced("TeleportRing",GetactorX(0),GetActorY(0),GetActorZ(0),0,GetActorAngle(0));
   INT OLDPOSX = GetActorX(0);
   INT OLDPOSY = GetActorY(0);
   INT OLDPOSZ = GetActorZ(0);
        Giveinventory("Spawn_Catty",1);
      Delay(15);
   
  }
  Else
  {
  cattyhealth = GetActorProperty (0, APROP_HEALTH);
  Takeinventory("Enable_DashAttack",1);
     Takeinventory("Fire_Pressed",1);
     Takeinventory("SlomoOnline",1);
  SpawnForced("TeleportRing",GetactorX(0),GetActorY(0),GetActorZ(0),0,GetActorAngle(0));
   Delay(1);

  
  Giveinventory("Spawn_M16",1);
  UnMorphActor(1001+PlayerNumber(),True);
  SetActorProperty (0, APROP_HEALTH,m16health);
    Thing_ChangeTID(0,1001+PlayerNumber());
  ACS_NamedExecuteAlways("InvulTime",0,10,0,0);
         Takeinventory("Fire_Pressed",1);
           Giveinventory("ShowMaster",1);
       Takeinventory("PlayingCatty",1);
   Delay(15);
  }
   }
  Else
  {

    }
  }
  Else
  {
    }
  }
    ELSE
    {

    }


   }

      delay(1);
}

}

script "CattySpecialAttack" (void)
{
  if(CheckInventory("CattyCooltime")==0)
   {
   SetActorProperty(0, APROP_Invulnerable, true);
Giveinventory("Baldo",1);

   GiveInventory("CattyCooltime",300);
       SetHUDSize(880, 640, TRUE);
     delay(10);
        ACS_NamedExecuteAlways("SpecialattackSound",0,0,0,0);
    int Imagenum;
                Giveinventory("TimeisStopnow",1);
    For(Imagenum = 0; Imagenum <= 71; Imagenum += 1)
    {
            Setfont(UPPERimage[Imagenum]);
            HudMessage(s:"A"; HUDMSG_ADDBLEND, 1004,CR_UNTRANSLATED, 440.0, 320.0, 1.0);
       SetHUDSize(880, 640, TRUE);
            Delay(2);
        }
            Setfont("CATSH71");
            HudMessage(s:"A"; HUDMSG_ADDBLEND|HUDMSG_FADEOUT, 1004,CR_UNTRANSLATED, 440.0, 320.0, 0.0,0.5);
            SetHUDSize(880, 640, TRUE);

            Delay(2);
      Giveinventory("CattySpecialAttack",1);
         delay(35*1);
            SetActorProperty(0, APROP_Invulnerable, false);
     delay(35*2);

     }
}

script "UnmorphEmily" (int type)
{
if(type == 1)
{
    GiveInventory("EmilyPain",4);
  SetPlayerProperty(TRUE, ON, PROP_TOTALLYFROZEN);
 Delay(1);
 
     Takeinventory("Fire_Pressed",1);
            Takeinventory("ShieldOnline",1);
       Takeinventory("ShieldFinished",1);
       Takeinventory("ShieldPowerGiver",1);
     Takeinventory("ShieldPower",1);

 Delay(1);
       Takeinventory("ShieldPowerGiver",1);
     Takeinventory("ShieldPower",1);
   MorphActor(1001+PlayerNumber(),"EmilyPlayer","",0x7fffffff,MRF_FULLHEALTH|MRF_UNDOALWAYS|MRF_WHENINVULNERABLE ,"NoFlash","NoFlash");
          Thing_ChangeTID(0,1001+PlayerNumber());
   Giveinventory("PlayingEmily",1);
ACS_NamedExecuteAlways("InvulTime",0,10,0,0);
  SpawnForced("TeleportRing",GetactorX(0),GetActorY(0),GetActorZ(0),0,GetActorAngle(0));
   INT OLDPOSX = GetActorX(0);
   INT OLDPOSY = GetActorY(0);
   INT OLDPOSZ = GetActorZ(0);
        Giveinventory("Spawn_Emily",1);
             Giveinventory("HideMaster",1);
    Until(CheckInventory("EmilyReady")==1)
    {
            Delay(1);
        }


      Delay(5);
SetPlayerProperty(TRUE, OFF, PROP_TOTALLYFROZEN);
}
else
{
  Takeinventory("EmilyReady",1);
     Takeinventory("Fire_Pressed",1);
  SpawnForced("TeleportRing",GetactorX(0),GetActorY(0),GetActorZ(0),0,GetActorAngle(0));
   Delay(1);

  UnMorphActor(1001+PlayerNumber(),True);
    Thing_ChangeTID(0,1001+PlayerNumber());
  ACS_NamedExecuteAlways("InvulTime",0,10,0,0);
           Giveinventory("HookCancel",1);
           Giveinventory("ShowMaster",1);
       Takeinventory("PlayingEmily",1);
     Takeinventory("HOOKEND",1);
     if(CheckInventory("Emilypuzzle")==1)
     {
     ACS_NamedExecute("emily_return",0,0,0,0);
     }
     else
     {
     }
     }
}

Script "SpecialattackSound" (void)
{
SetMusicVolume(0.25);
        FadeRange(0,0,0,0.0,0,0,0,0.9,1.5);
PlaySound (0,"SPEC000", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
PlaySound (0,"SPEC003", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
delay(70);
PlaySound (0,"SPEC002", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
PlaySound (0,"SPEC001", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);

delay(35);
        FadeRange(0,0,0,1.0,0,0,0,0.0,0.5);
PlaySound (0,"SPEC004", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
PlaySound (0,"SPEC005", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
delay(15);
SetMusicVolume(1.0);
}
// check if player is on ground
function int CheckPlayerOnGround(void)
{
  int onground;
  if(GetActorZ (0) == GetActorFloorZ (0) ||
       (GetActorVelZ(0) == 0 && !Spawn("Z_FloorCheck", GetActorX(0), GetActorY(0), GetActorZ(0) - (4 << 16), 0, GetActorAngle(0)))
       )
  {
    onground = 1;
    //SetFont("smallfont");
    //Print(s: "on ground");
  }
  else
  {
    onground = 0;
    //SetFont("smallfont");
    //Print(s: "in air");
  }
  return onground;
}

script "BackwardsCheck" (INT TID)
{
  if(GetActorAngle(TID)<0.75 && GetActorAngle(TID)>0.25 )
  {
    GiveInventory("BackwardsCheck",1);
  }
  else
  {
    TakeInventory("BackwardsCheck",1);
  }
}
script "BackwardsCheck2" (void)
{
SetActorVelocity(0,FixedMul(cos(GetActorAngle(0)),GetActorProperty(0, APROP_SPEED)), FixedMul(sin(GetActorAngle(0)), 14),GetActorVelZ(0), 0, 0);
}
script "Check_CoolTime_Emily" (void)
{
While(CheckInventory("EmilyCooltime")>0)
{
TakeInventory("EmilyCooltime",1);
delay(35);
}
delay(1);
terminate;
}



script "InvulTime" (int time)
{
int tid;
While(time>0)
{
if (!(ClassifyActor(0) & ACTOR_PLAYER))
{
tid = 0;
}
else
{
If(Checkinventory("PlayingEmily")||Checkinventory("PlayingCatty"))
{tid = 1001+PlayerNumber();}
}
If(Checkinventory("ShieldOnline")==1)
{

}
else
{
SetActorProperty(tid, APROP_Invulnerable, true);
}

SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_add);
Delay(1);
SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_none);
Delay(1);
SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_Translucent);
Delay(1);
time--;
}
If(Checkinventory("ShieldOnline")==1)
{

}
else
{
SetActorProperty(tid, APROP_Invulnerable, false);
}

delay(1);
}
script "FlashTime" (int time,int appear,int tid)
{
While(time>0)
{
SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_add);
Delay(1);
If(appear==1)
{
SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_Translucent);
}
Else
{
SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_none);
Delay(1);
}

SetActorProperty(tid, APROP_RENDERSTYLE, STYLE_Translucent);
Delay(1);
time--;
}
delay(1);
}


script "CheckSpeed" ENTER
{
        int buttons; int heldButtons; int newButtons; int oldButtons;
 while (TRUE)
 {
 int pln = PlayerNumber(); // this is obligitory by now
 int playerAngle;  int playerAngle2;
 bool bInMidAir; int playerHeight; int playerJumpZ;
 int playerSpeed; int dodgeSpeed;  int dodgeSpeed2;
 heldButtons =  GetPlayerInput(-1, ModINPUT_OLDBUTTONS);
 buttons =     GetPlayerInput(-1, MODINPUT_BUTTONS);
 newButtons = (buttons ^ heldButtons) & buttons;
 oldButtons = (buttons ^ heldButtons) & heldButtons;
 INT FLOORHEIGHT = GETACTORZ(0)-GETACTORFLOORZ(0);
      playerangle = GetActorAngle(0) >> 8;

 if (GetActorProperty (0, APROP_HEALTH) > 0)
 {
    IF(newButtons == BT_Speed)
   {
         If(CheckInventory("PlayingCatty")==1)
   {
     Giveinventory("Dashing",1);
   }
   else
   {
     Giveinventory("Dashing",1);
   }
  Delay(1);
     takeinventory("Dashing",1);
       If(CheckInventory("PlayingCatty")==0)
   {
  Delay(20);
  }
  else
  {
  Delay(10);
  }
    }
    Else IF(newButtons == BT_JUMP)
   {
      if(CheckInventory("Wall_Touched") > 0 && CheckInventory("PlayingCatty") > 0 && CheckInventory("PlasmaGauge") > 21)
   {

        if (CheckInventory("BackwardsCheck") > 0)
       {
       takeinventory("BackwardsCheck",1);
       Giveinventory("Find_NextWall",1);
       takeinventory("Wall_Touched",1);
      Playsound(0,"*jump",0,1.0,false,ATTN_NONE);
            ThrustThing(playerangle*256/360+192, 40, 0, 0);
			 Delay(1);
			 ThrustThingZ(0,64,0,0);
      
       }
       else
       {
        Giveinventory("BackwardsCheck",1);
       Giveinventory("Find_NextWall",1);
       takeinventory("Wall_Touched",1);
       Playsound(0,"*jump",0,1.0,false,ATTN_NONE);
            ThrustThing(playerangle*256/360+64, 40, 0, 0);
			 Delay(1);
			 ThrustThingZ(0,64,0,0);
   }
   }
   Else
   {
   Giveinventory("HookCancel",1);
   Delay(1);
   takeinventory("HookCancel",1);
   }

    }
    ELSE
    {

    }


   }

      delay(1);
}

}
script "ShieldSpawn" ENTER
{
        int buttons; int heldButtons; int newButtons; int oldButtons;
 while (TRUE)
 {
 int playerSpeed; int dodgeSpeed;  int dodgeSpeed2;
 heldButtons =  GetPlayerInput(-1, ModINPUT_OLDBUTTONS);
 buttons =     GetPlayerInput(-1, MODINPUT_BUTTONS);
 newButtons = (buttons ^ heldButtons) & buttons;
 oldButtons = (buttons ^ heldButtons) & heldButtons;
 INT FLOORHEIGHT = GETACTORZ(0)-GETACTORFLOORZ(0);

 if (GetActorProperty (0, APROP_HEALTH) > 0)
 {
    IF(newButtons == BT_USER2)
   {
if(CheckInventory("PlayingEmily")==1)
{

    if(CheckInventory("HOOKEND")>0)
    {
    Giveinventory("HookCancel",1);
         delay(5);
         takeinventory("HookCancel",1);
   Giveinventory("HOOKACTIVATOR",1);
         delay(10);
         takeinventory("HookActivator",1);

    }
    else
    {
         takeinventory("HookCancel",1);
   Giveinventory("HOOKACTIVATOR",1);
         delay(5);
         takeinventory("HookActivator",1);
         delay(10);
    }

    }
Else if(CheckInventory("PlayingCatty")==1) //CATTY
{
    if(CheckInventory("SlomoOnline")==1)
    {
  Acs_NamedExecute("FadeInmusic",0,0,0,0);
    Takeinventory("SlomoOnline",1);
          HudMessage(s:""; HUDMSG_PLAIN, 9031, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9032, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9033, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9034, CR_UNTRANSLATED, 0, 0, 0);
    }
    else
    {
PlaySound (0,"SLST", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
  Acs_NamedExecute("SlomoActivator",0,0,0,0);
  Acs_NamedExecute("FadeOutmusic",0,0,0,0);
    Giveinventory("SlomoOnline",1);
    }

    }
    ELSE
    {
    if(CheckInventory("ShieldOnline")==1)//m16
    {

    Takeinventory("ShieldOnline",1);
    Takeinventory("ShieldFinished",1);
    }
    else
    {
    Giveinventory("ShieldActivator",1);
    }
    }
    }
}


      delay(1);
}

}

script "FadeOutmusic" (void) {
  INT VOL;
  if(GetCVar("snd_musicvolume")>0.0)
  {
      For(VOL = 1.0; VOL >= 0.2; VOL -= 0.05)
        {
            SetMusicVolume(VOL);
            Delay(1);
        }
                Delay(35);
          }
          else
          {}
          

}
script "FadeInmusic" (void) 
{
    INT VOL;
  if(GetCVar("snd_musicvolume")>0.0)
  {
        For(VOL = 0.2; VOL <= 1.0; VOL += 0.05)
        {
            SetMusicVolume(VOL);
            Delay(1);
        }
          }
          else
          {}
  
}

script "SlomoActivator" (void)
{

    while(Checkinventory("Plasmagauge")>0)
  {

  SetCameraToTexture(ActivatorTID()+1000,"FORBLUR0",120);
  SetFont("FORBLUR0");
    SetHudSize(1200,720,FALSE);
  HudMessage(s:"a"; HUDMSG_PLAIN | HUDMSG_ALPHA | HUDMSG_LAYER_UNDERHUD | HUDMSG_NOTWITHFULLMAP,9032, CR_UNTRANSLATED, 600.0, 360.0, 0.0, 0.125);
    SetHudSize(1120,680,FALSE);
  HudMessage(s:"a"; HUDMSG_PLAIN | HUDMSG_ALPHA | HUDMSG_LAYER_UNDERHUD | HUDMSG_NOTWITHFULLMAP,9033, CR_UNTRANSLATED, 560.0, 340.0, 0.0, 0.100);
    SetHudSize(1080,640,FALSE);
  HudMessage(s:"a"; HUDMSG_PLAIN | HUDMSG_ALPHA | HUDMSG_LAYER_UNDERHUD | HUDMSG_NOTWITHFULLMAP,9034, CR_UNTRANSLATED, 540.0, 320.0, 0.0, 0.075);
  TakeInventory("Plasmagauge",3);
  giveinventory("Slomotime",1); 
  
    giveinventory("SlomoTrail",1); 
    if(CheckInventory("SlomoOnline")==0)
    {
  PlaySound (0,"SLED", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
  Acs_NamedExecute("FadeInmusic",0,0,0,0);
      HudMessage(s:""; HUDMSG_PLAIN, 9032, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9033, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9034, CR_UNTRANSLATED, 0, 0, 0);
  Terminate;
  }
    if(CheckInventory("Plasmagauge")==0)
    {
      Takeinventory("SlomoOnline",1);
      PlaySound (0,"SLED", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
      Acs_NamedExecute("FadeInmusic",0,0,0,0);
      HudMessage(s:""; HUDMSG_PLAIN, 9032, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9033, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9034, CR_UNTRANSLATED, 0, 0, 0);
    Terminate;

  }
  delay(1);
      giveinventory("SlomoTrail",1); 
  TakeInventory("Plasmagauge",2);
  delay(1);
      giveinventory("SlomoTrail",1); 
  TakeInventory("Plasmagauge",2);
  delay(1);
  }
      HudMessage(s:""; HUDMSG_PLAIN, 9032, CR_UNTRANSLATED, 0, 0, 0);
      HudMessage(s:""; HUDMSG_PLAIN, 9033, CR_UNTRANSLATED, 0, 0, 0);
  HudMessage(s:""; HUDMSG_PLAIN, 9034, CR_UNTRANSLATED, 0, 0, 0);
  Takeinventory("SlomoOnline",1);
  PlaySound (0,"SLED", CHAN_NOPAUSE, 1.0, 0,ATTN_NONE);
  Acs_NamedExecute("FadeInmusic",0,0,0,0);
}

script "CheckJumpDown" ENTER
{
        int buttons; int heldButtons; int newButtons; int oldButtons;
 while (TRUE)
 {
 int pln = PlayerNumber(); // this is obligitory by now
 int playerAngle;  int playerAngle2;
 bool bInMidAir; int playerHeight; int playerJumpZ;
 int playerSpeed; int dodgeSpeed;  int dodgeSpeed2;
 heldButtons =  GetPlayerInput(-1, INPUT_OLDBUTTONS);
 buttons =     GetPlayerInput(-1, INPUT_BUTTONS);
 newButtons = (buttons ^ heldButtons) & buttons;
 oldButtons = (buttons ^ heldButtons) & heldButtons;
 INT FLOORHEIGHT = GETACTORZ(0)-GETACTORFLOORZ(0);

 if (GetActorProperty (0, APROP_HEALTH) > 0)
 {
    IF(newButtons == BT_USER3)
   {
     Giveinventory("JumpToDown",1);
  Delay(1);
     takeinventory("JumpToDown",1);
  }
    ELSE
    {
  
    }

   }

      delay(1);
}

}


// modified version of ScaleVelocity()
// thanks to MeatyD for this piece of code
function void ModifyPlayerFriction(int TID, int scale)
{
  SetActorVelocity(TID, FixedMul(scale, GetActorVelX(TID)),
              FixedMul(scale, GetActorVelY(TID)),
              GetActorVelZ(TID),
              false, true);
}

#define FRICTION_FACTOR 0.55
// smaller numbers = faster deceleration
// 0.0 = instantly stop after releasing movement keys
// 1.0 = default Doom movement (slippery)



//Returns 1 if the player pressed jump and 2 if the player released jump (in a given tic)
//Returns 3 if the player is holding jump and 0 if they haven't pressed jump (in a given tic)
Function int JumpStatus (int Buttons, int OldButtons)
{
  int JumpNow = Buttons & BT_JUMP;
  int JumpOld = OldButtons & BT_JUMP;
  //if (CheckInventory("JumptoDown")) { return 3; }
  if (JumpNow > JumpOld) { return 1; }
  if (JumpNow < JumpOld) { return 2; }
  if (JumpNow > 0 &&  JumpOld > 0) { return 3; }
  Return 0;
}
//&& CheckInventory("CutSceneblock")==0
script "CheckCrouch" ENTER
{

 int buttons =     GetPlayerInput(-1, INPUT_BUTTONS);
 INT FLOORHEIGHT = GETACTORZ(0)-GETACTORFLOORZ(0);

if (buttons & BT_CROUCH )
{

If(CheckInventory("HOOKEND")>0 && CheckInventory("PlayingEmily")>0 )
{
  Giveinventory("AimDown",1);
  }
  else
  {
    if(GetActorVelZ(0)==0)
    {

     SetPlayerProperty (0, 1, PROP_FROZEN);
   
         Giveinventory("Crouching",1);
    }
    ELSE
    {
    if(buttons & BT_Jump )
    {
	SetPlayerProperty (0, 0, PROP_FROZEN);
             Giveinventory("AimDown",1);
             }
         SetPlayerProperty (0, 0, PROP_FROZEN);
             Giveinventory("AimDown",1);
    }
    if(GetActorVelZ(0)==0)
    {
	SetPlayerProperty (0, 0, PROP_FROZEN);
     SetPlayerProperty (0, 1, PROP_FROZEN);
          takeinventory("AimDown",1);
         Giveinventory("Crouching",1);
    }
  }
}


else
{
  SetPlayerProperty (0, 0, PROP_FROZEN);
     takeinventory("Crouching",1);
     takeinventory("AimDown",1);
}
   delay(1);
   RESTART;
}

//1001-1032 - Players
//2001-2032 - Corresponding cameras

//script "ChangeRespawnPosition" (void)
//{
//SetactorPosition(1346,Getactorx(1001+PlayerNumber()),Getactory(1001+PlayerNumber()),Getactorfloorz(1001+PlayerNumber()),0);
//}

Script 100 RESPAWN
{
    FadeRange(255,255,255,1.0,255,255,255,0.0,0.5);
//SetactorPosition(0,Getactorx(1346),Getactory(1346),Getactorfloorz(1346),0);

ACS_ExecuteAlways(101,0,0,0,0);
ACS_NamedExecute("InvulTime",0,15,0,0);
  Thing_ChangeTID(0,1001+PlayerNumber());
  TakeInventory("BackwardsCheck",1);
  delay(1);
  if(ThingCountName("Respawn_Pointer",2500)>0)
  {

    SetActorPosition(0,GetActorX(2500),GetActorY(2500),GetActorZ(2500),0);
    Takeinventory("RespawnFollowOff",1);
  }



}
script 102 death
{
    Giveinventory("RespawnFollowOff",1);
}

int xmod;


function int CheckPlayerOnWall(void)
{
  int Wallcheck;
  if(!Spawn("WallCheck", GetActorX(0), GetActorY(0), GetActorZ(0) + 32.0, 0, GetActorAngle(0))
       )
  {
    Wallcheck = 1;
    //SetFont("smallfont");
    //Print(s: "on ground");
  }
  else
  {
    Wallcheck = 0;
    //SetFont("smallfont");
    //Print(s: "in air");
  }
  return Wallcheck;
}


Script 101 ENTER //CAMERA AND INPUT
{
    int buttons, oldbuttons;
    int buttonweight, buttonweightmove, buttondelay;
    int jumpstate, grounded, jumped, airtime, savejump;
  int WallCheck;
  int Getvx;
  int getvz;
    //int xmod;

    Thing_ChangeTID(0,1001+PlayerNumber());
    Spawnforced("SideCam",GetActorX(0),GetActorY(0),GetActorfloorZ(0),ActivatorTID()+1000,64);
  if(ThingCountName("Respawn_Pointer",2500)>0)
  {}
  else
  {    Spawnforced("Respawn_Pointer",GetActorX(0),GetActorY(0),GetActorfloorZ(0),2500,64);}
    ChangeCamera(ActivatorTID()+1000,0,0);
    While (true)
    {
        // Status stuff
        buttons = GetPlayerInput(-1, INPUT_BUTTONS);
        oldbuttons = GetPlayerInput(-1, INPUT_OLDBUTTONS);
      jumpstate = JumpStatus(buttons, oldbuttons);
        SetAirControl(0.600); // SPOOKY
        changeActorAngle(0,0.25,0);
    SetActorPitch(0,0);


 
        // Friction on the ground, slower jump in mid-air
    if (CheckPlayerOnGround())
        {
            ModifyPlayerFriction(1001+PlayerNumber(), 0.55);

      if(CheckInventory("PlayingEmily") > 0)
      {
	  Getvx = GetActorVelx(0)*4;
 SetActorProperty(0, APROP_SPEED,1.0);
      }
            else if(CheckInventory("PlayingCatty") > 0)
      {
 SetActorProperty(0, APROP_SPEED,1.0);
      }     
      Else
      {
		Getvx = GetActorVelx(0)*4;
			TakeInventory("DashSpeed",1);
            TakeInventory("JumpSpeed",1);
      }
            jumped = 0;
            airtime = 0;
            savejump = 0;
        }
        else
        {
      if(CheckInventory("PlayingEmily") > 0)
      {
 SetActorProperty(0, APROP_SPEED,0.25);
 Getvx = GetActorVelx(0)*2;
      }
      else if(CheckInventory("PlayingCatty") > 0)
      {
 SetActorProperty(0, APROP_SPEED,0.25);
      }
      Else
      {
 SetActorProperty(0, APROP_SPEED,1.0);
 GiveInventory("JumpSpeed",1);
 TakeInventory("DashSpeed",1);
		Getvx = GetActorVelx(0)*2;
      
      }

			 
            airtime++;
        }
 
        // Here's a catch-all for if you fall off a ledge but need a couple extra tics to make your jump.
        if (grounded == 0 && airtime > 0 && airtime < 4 && jumped == 0 && buttons & BT_JUMP && savejump == 0)
        {
           //ThrustThingZ(0,57,0,0);
           jumped = 1;
           savejump = 1;
       
        }

    Switch(jumpstate)
    {
    Case 1: // You pressed Jump
      grounded = 0;
            jumped = 1;

      break;

    Case 2: // You Released Jump
      if(CheckInventory("JumpStop") > 0)
      {
        TakeInventory("JumpStop",1);
        ThrustThingZ(0,0,0,0);
        grounded = 0;
      }
      break;

    Default: //Holding Jump OR not holding Jump
      if( (GetActorZ(0) - GetActorFloorZ(0) == 0.0) || grounded == 3)
      {
        GiveInventory("JumpStop",1);
        //print(s:"You're grounded!");
      }
      if(GetActorVelZ(0) == 0.0 && grounded < 3 && GetActorCeilingZ(0) - GetActorZ(0) > 54.0) { grounded++; } // The height of the actor actually checks at 52, but just making sure.

      if(GetActorVelZ(0) < 0.0)
      {
        TakeInventory("JumpStop",1);
    
        //print(s:"You're falling!");
        grounded = 0;
      }
      break;
    }

        // All right, time to fuck up the camera.

        if (buttons & BT_FORWARD) // Checks for if the player is holding left.
    {
            GiveInventory("Aimup",1);
      buttondelay = 0;
    }
        if (buttons & BT_MOVERIGHT) // Checks for if the player is holding right.
        {
      GiveInventory("WallCheckerR",1);
  TakeInventory("BackwardsCheck",1);
  GiveInventory("Moving",1);
        if(CheckInventory("Wall_Touched") > 0 && CheckInventory("PlayingCatty") > 0 && CheckInventory("PlasmaGauge") > 21)
      {
    
            if(CheckInventory("CommonCombo") < 2)
      {
    
        ThrustThingZ(0,30,0,0);
      }
      }
    
            if (buttonweightmove < 0) { buttonweightmove = 0.0; }
            buttonweightmove = buttonweightmove + 4.0;
      buttonweight = buttonweight + 1.0;
      buttondelay = 0;
    }
        if (buttons & BT_MOVELEFT) // Checks for if the player is holding left.
    {
    GiveInventory("WallCheckerL",1);
    GiveInventory("BackwardsCheck",1);
            GiveInventory("Moving",1);
        if(CheckInventory("Wall_Touched") > 0 && CheckInventory("PlayingCatty") > 0 && CheckInventory("PlasmaGauge") > 21)
      {
            if(CheckInventory("CommonCombo") < 2)
      {
    
        ThrustThingZ(0,30,0,0);
      }
      }


            buttonweightmove = buttonweightmove - 4.0;
      buttonweight = buttonweight - 1.0;
      buttondelay = 0;
    }
        if ( !(buttons & BT_FORWARD)) // If the player is not pushing up
        {

            TakeInventory("aimup",1);
            buttondelay = buttondelay + 1.0;
        }
        if ( !(buttons & BT_MOVELEFT) && !(buttons & BT_MOVERIGHT)) // If the player is not pushing right or left.
        {
            TakeInventory("Moving",1);
            buttondelay = buttondelay + 1.0;
            if (buttondelay > 45.0) { buttonweight = 0; }
            buttonweightmove = 0;
        }

        //if (buttonweightmove < -3.0) { GiveInventory("BackwardsCheck",1); }
        //if (buttonweightmove > 3.0) { TakeInventory("BackwardsCheck",1); }
        if (buttonweight < -12.0) { xmod = xmod - 8; }
        if (buttonweight > 12.0) { xmod = xmod + 8; }
        if (buttonweight > 12.0) { buttonweight = 12.0; }
        if (buttonweight < -12.0) { buttonweight = -12.0; }

        if (CheckInventory("CamOff") > 0) 
        {

        Warp(ActivatorTID()+1000,GetActorX(ActivatorTID()+1000),GetActorY(0)-320.0,GetActorZ(0)+96.0-GetActorVelz(0),GetActorAngle(0) >> 8,WARPF_INTERPOLATE | WARPF_WARPINTERPOLATION | WARPF_NOCHECKPOSITION | WARPF_ABSOLUTEPOSITION | WARPF_MOVEPTR);
        }
        else{        
        Warp(ActivatorTID()+1000,GetActorX(0)+Getvx,GetActorY(0)-320.0,GetActorZ(0)-getactorVelz(0)/3+96.0,GetActorAngle(0) >> 8,WARPF_INTERPOLATE | WARPF_WARPINTERPOLATION | WARPF_NOCHECKPOSITION | WARPF_ABSOLUTEPOSITION | WARPF_MOVEPTR);
        }
        
        //if (CheckInventory("RespawnFollowOff") > 0) {}
        //else{        Warp(2500,GetActorX(0),GetActorY(0),GetActorZ(0)+26.0,GetActorAngle(0) >> 8,WARPF_INTERPOLATE | WARPF_WARPINTERPOLATION | WARPF_NOCHECKPOSITION | WARPF_ABSOLUTEPOSITION | WARPF_MOVEPTR);}
        

        // Debug info
    if (GetCvar("plat_debug") == 1)
    {
      SetHudSize(640,400,1);
          HudMessage(s:"\cfStatus:\cj\n",
             s:"  - ", f:buttonweight,s:" buttonweight\n",
             s:"  - ", f:buttondelay,s:" buttondelay\n",
             s:"  - ", f:buttonweightmove,s:" buttonweightmove\n",
             s:"  - ", d:grounded,s:" grounded\n",
             s:"  - ", d:jumpstate,s:" jumpstate\n",
             s:"  - ", f:GetActorVelx(0),s:" velx\n",
               s:"  - ", f:GetActorCeilingZ(0) - GetActorZ(0),s:" ceilz\n",
                              s:"  - ", f:GetActorZ(0) -GetActorfloorZ(0) ,s:" floorz\n",
                                          s:"  - ", f:GetActorZ(0),s:" z\n",
             s:"  - ", d:airtime,s:" airtime\n",
             s:"  - ", d:jumped,s:" jumped\n",
             s:"  - ", d:savejump,s:" savejump";
         HUDMSG_PLAIN, 10, CR_UNTRANSLATED, 4.0, 72.0, 0.1);
    }
        if (CheckInventory("Health") <= 0) 
        { 

            terminate; }

    Delay(1);
  }
}
script "DashSpeed" (int direction,int speed)
{
If(direction==0)
{
SetActorVelocity(0,speed<<16,GetActorVelY(0),GetActorVelZ(0),FALSE,FALSE); //right
}
else
{
SetActorVelocity(0,-speed<<16,GetActorVelY(0),GetActorVelZ(0),FALSE,FALSE);//left
}
}
script "DashSpeed2" (int direction,int speed,int Velz)
{
If(direction==0)
{
SetActorVelocity(0,speed<<16,GetActorVelY(0),Velz<<16,FALSE,FALSE); //right
}
else
{
SetActorVelocity(0,-speed<<16,GetActorVelY(0),Velz<<16,FALSE,FALSE);//left
}
}
script "EmilyEmotion" (Int type)
{
if(type==0)
{
giveinventory("EmilyWeaponPick",1);
delay(70);
takeinventory("EmilyWeaponPick",1);
}
if(type==1)
{
takeinventory("EmilyWeaponPick",1);
giveinventory("EmilyDizzy",1);
delay(70);
takeinventory("EmilyDizzy",1);
}

}


#define DODGEWINDOW 8
int BoostUP[32];
int BoostRight[32];
int BoostLeft[32];
int dDuckC[32];
int dead[32];

function int max(int num1, int num2)
{
        int ret;
        if (num1 > num2) {return num1;}
        
        return num2;
}
 
function int min(int num1, int num2)
{
        int ret;
        if (num1 < num2) {return num1;}
        
        return num2;
}

script 469 (void) net
{

int x, y, z, speed;
int pln = PlayerNumber(); // this is obligitory by now
int buttons; int heldButtons; int newButtons; int oldButtons;
bool bInMidAir; int playerHeight; int playerJumpZ;
int playerSpeed; int dodgeSpeed;

        while (!dead[pln])
        {
                heldButtons =  GetPlayerInput(-1, INPUT_OLDBUTTONS);
                buttons =     GetPlayerInput(-1, INPUT_BUTTONS);
                newButtons = (buttons ^ heldButtons) & buttons;
                oldButtons = (buttons ^ heldButtons) & heldButtons;
                playerHeight = GetActorZ(0) - GetActorFloorZ(0);         
                bInMidAir = (playerHeight > 0);


                if (newButtons & BT_CROUCH)
                {
                        if (dDuckC[pln])
                        {
                                Delay(1);
                                If(GetActorVelZ(0) == 0.0)
                                {
                                        //giveinventory("JumptoDown",1);
                                        Delay(1);
                                        //takeinventory("JumptoDown",1);
                                }
                                dDuckC[pln] = 0;
                        }
                        else
                        {
                                dDuckC[pln] = DODGEWINDOW;
                        }
                }
               //// else if (newButtons & BT_FORWARD)/////
//               {
//              If(CheckInventory("CutSceneBlock")==0)
//               {
 //                       if (BoostUP[pln])
  //                      {
   //                             Delay(1);
    //                            If(CheckInventory("Booster_Enable") >0)
     //                           {
      //                                  giveinventory("BOOST",1);
    //                                  giveinventory("Aimup",1);
     //                                   Delay(20);
      //                                  //takeinventory("BOOST",1);
       //                         }
        //                        BoostUP[pln] = 0;
         //               }
          //              else
           //             {
            //                    BoostUP[pln] = DODGEWINDOW;
             //           }
              //   }
                ////}/////
                else if (newButtons & BT_MOVELEFT)
                {
                If(CheckInventory("CutSceneBlock")== 0)
                   {
                        if (BoostLeft[pln])
                        {
                                Delay(1);
                                If(CheckInventory("Booster_Enable") >0 && CheckInventory("PlasmaGauge")>69)
                                {
                                        takeinventory("PlasmaGauge",70);
                                        giveinventory("BOOST",1);
                                        Delay(20);
                                        //takeinventory("BOOST",1);
                                }
                                BoostLeft[pln] = 0;
                        }
                        else
                        {
                                BoostLeft[pln] = DODGEWINDOW;
                        }
                    }
                }
                else if (newButtons & BT_MOVERIGHT)
                {
                If(CheckInventory("CutSceneBlock")==0  && CheckInventory("PlasmaGauge")>69)
                 {
                        if (BoostRight[pln])
                        {
                                Delay(1);
                                If(CheckInventory("Booster_Enable") >0)
                                {
                                        takeinventory("PlasmaGauge",70);
                                        giveinventory("BOOST",1);
                                        Delay(20);
                                        //takeinventory("BOOST",1);
                                }
                                BoostRight[pln] = 0;
                        }
                        else
                        {
                                BoostRight[pln] = DODGEWINDOW;
                        }
                 }
                }
                else
                {}
                BoostUP[pln] = max(BoostUP[pln]-1, 0);
                BoostRight[pln] = max(BoostRight[pln]-1, 0);
                BoostLeft[pln] = max(BoostLeft[pln]-1, 0);
                dDuckC[pln] = max(dDuckC[pln]-1, 0);
                        Delay(1);
        }
}
 

script 467 ENTER net
{
        ACS_ExecuteAlways(469, 0, 0, 0, 0);
}
 
script 478 DEATH net
{
        dead[PlayerNumber()] = 1;
}
 
script 479 RESPAWN net
{
        dead[PlayerNumber()] = 0;
        ACS_ExecuteAlways(469, 0, 0, 0, 0);
}



script "CheckMastersGetHurt" (int tid)
{
SetActorProperty (0, APROP_MasterTID,tid);
int firstH,LastH;
if (GetActorProperty (tid, APROP_Health)<1)
{
terminate;
}
firstH = GetActorProperty (tid, APROP_Health);
Delay(3);
LastH = GetActorProperty (tid, APROP_Health);
if (firstH-LastH>0)
{
Acs_NamedExecuteAlways("InvulTime",0,3,1,0);
}
Restart;
}

//
//  Scripts
//
//  Functions
//

// IsTIDUnique (Int TID)
// Returns true if only one actor has the specified TID
// Returns false if it finds none, or there is more than one
Function Bool IsTIDUnique (Int TID)
{
    If (ThingCount(T_NONE, TID) > 1)
    {
        // It isn't unique, so return false
        Return False;
    }
    
    If (!(IsTIDUsed(TID)))
    {
        // There are no actors with this TID
        Return False;
    }
    Return True;
}

// GetActivatorTID
// Checks if the activator has a TID and gets it
// If the activator doesn't have a TID, a new one is set
Function Int GetActivatorTID (void)
{
    If (!(IsTIDUnique(ActivatorTID())))
        Thing_ChangeTID (0, UniqueTID());
    Return ActivatorTID();
}

// Int IsOdd (Int Number)
// Checks if a number is even or odd
// Returns 0 for even numbers and 1 for odd numbers
Function Int IsOdd (Int number)
{ 
   int p = number % 2;
   return p;
}

// Abs (Int x)
// Gets the absolute value of the specified number
// Numbers less than 0 are inverted, so -5 becomes 5
Function Int Abs (Int x)
{
    If (x < 0)
        Return -x;

    Return x;
}

// Pow (Int x, Int n)
// Multiplies x by itself n times.
// Pow (3, 4) would be 81 since 3 * 3 * 3 * 3 = 81
Function Int Pow (Int x, Int n)
{
    Int y = 1;
    While (n-- > 0) y *= x;
    Return y;
}

// Round (Int f)
// Rounds a decimal to a whole number
// Numbers will be rounded down unless you add 0.5 before using the function
Function Int Round (Int f)
{
    Return f >> 16;
}

// FixedDistance (Int tid1, Int tid2)
// Gets the 2D distance between two actors
// Number is return as a fixed point
Function Int FixedDistance (Int tid1, Int tid2)
{   
    Int x = GetActorX(tid1) - GetActorX(tid2);
    Int y = GetActorY(tid1) - GetActorY(tid2);
    
    Int len = VectorLength(x, y);
    Return len;
}

// Distance (Int tid1, Int tid2)
// Same as FixedDistance, except it returns a whole number
Function Int Distance (Int tid1, Int tid2)
{
    Return Round(FixedDistance(tid1, tid2));
}

// XYZ_FixedDistance (Int tid1, Int tid2)
// Gets the 3D distance between two actors
// Number is return as a fixed point
Function Int XYZ_FixedDistance (Int tid1, Int tid2)
{
    Int z = ZDistance(tid1, tid2);
    
    Int len = VectorLength ((FixedDistance (tid1, tid2)), z);
    Return len;
}

// XYZ_Distance (Int tid1, Int tid2)
// Same as XYZ_FixedDistance, except it returns a whole number
Function Int XYZ_Distance (Int tid1, Int tid2)
{
    Return Round (XYZ_FixedDistance (tid1, tid2));
}

// ZDistance (Int tid1, Int tid2)
// Gets the height difference between two actors
Function Int ZDistance (Int tid1, Int tid2)
{
Int getactorattackz = (GetActorProperty(tid1,APROP_HEIGHT)/2);
int GetactorZheight = GetActorZ(tid1)+getactorattackz;
    Return (GetactorZheight- GetActorZ(tid2));
}

// Angle (Int tid1, Int tid2)
// Gets the angle between two actors
// An actor's facing angle isn't taken into account
Function Int Angle (Int tid1, Int tid2)
{
    int x, y;
    x = GetActorX(tid1) - GetActorX(tid2);
    y = GetActorY(tid1) - GetActorY(tid2);
    return VectorAngle(x, y);
}

// ByteAngle (Int tid1, Int tid2)
// Same as Angle, but returned as a byte angle instead
Function Int ByteAngle (Int tid1, Int tid2)
{
    return Angle(tid1, tid2) >> 8;
}

// Pitch (Int tid1, Int tid2)
// Gets the pitch between two actors
// An actor's camera pitch isn't taken into account
Function Int Pitch (Int tid1, Int tid2)
{
    Int x, y, z, xy, a;
    x = GetActorX(tid2) - GetActorX(tid1);
    y = GetActorY(tid2) - GetActorY(tid1);
    z = GetActorZ(tid2) - GetActorZ(tid1);
    a = VectorAngle(x, y);

    if ((a + 0.125) % 0.5 > 0.25)
        xy = FixedDiv(y, sin(a));
    else
        xy = FixedDiv(x, cos(a));

    return -VectorAngle(xy, z);
}

// BytePitch (Int tid1, Int tid2)
// Same as Pitch, but returned as a byte pitch instead
Function Int BytePitch (Int tid1, Int tid2)
{
    return Pitch(tid1, tid2) >> 8;
}

// Player color functions

// PlayerColor (Int playernum)
// Get the player's color as a hexadecimal with range of [0, 255]
Function Int GetPlayerColor (Int playernum)
{
    Int playercolor;

    playercolor = GetPlayerInfo (playernum, PlayerInfo_Color);
    Return playercolor;
}

Function Int PlayerColorRed (Int playernum)
{
    Int playerred;
    playerred = GetPlayerColor(playernum) >> 16;
    Return playerred;
}

Function Int PlayerColorGreen (Int playernum)
{
    Int playergreen;
    playergreen = (GetPlayerColor(playernum) - (PlayerColorRed(playernum) << 16)) >> 8;
    Return playergreen;
}

Function Int PlayerColorBlue (Int playernum)
{
    Int playerblue;
    playerblue = GetPlayerColor(playernum) - (PlayerColorRed(playernum) << 16) - (PlayerColorGreen(playernum) << 8);
    Return playerblue;
}



Function Int PressedKey (Int key)
{
    int previous_buttons = GetPlayerInput (-1, ModInput_OldButtons);
    int current_buttons = GetPlayerInput (-1, ModInput_Buttons);
    
    if ((current_buttons & key) && !(previous_buttons & key))
    {
        Return key;
    }
    Return 0;
}

Function Int HeldKey (Int key)
{
    Int buttons = GetPlayerInput (-1, ModInput_Buttons);
    if (buttons & key)
        Return key;
    Return 0;
}


// PlayerHasSigil
// Goes through each player to check if they have a sigil
// If anyone has one, all of them are given the sigil
Function Bool PlayerHasSigil (void)
{
    Bool foundSigil;
    If (GameType () == GAME_NET_COOPERATIVE) // Don't run this in deathmatch or single player
    {
        // If the activator isn't a player, don't do anything
        If (ClassifyActor(0) & ACTOR_PLAYER)
        {
            Int ActivatorPlayer = PlayerNumber ();
            Int NumberOfPlayers = PlayerCount();
            Int n;
            foundSigil = False;
            For (n = 0; n < NumberOfPlayers; n++)
            {
                If (SetActivator (0, AAPTR_PLAYER1 << n))
                {
                    If (GetSigilPieces())
                        foundSigil = True;
                    // We found one, so stop executing the loop
                    If (foundSigil)
                        break;
                }
            }
            
            // Someone had it, so give one to everyone
            If (foundSigil)
            {
                For (n = 0; n < NumberOfPlayers; n++)
                {
                    If (SetActivator (0, AAPTR_PLAYER1 << n))
                    {
                        GiveInventory ("Sigil", 1);
                    }
                }
            }
            SetActivator (0, AAPTR_PLAYER1 << ActivatorPlayer);
        }
    }
    
    Return foundSigil;
}

// DrawSprite (Str Sprite, Int ID, Int X, Int Y, Int Alpha)
// Draws an image to the HUD with the specified coordinates, HUDMessage ID, and alpha
Function Bool DrawSprite (Str Sprite, Int ID, Int X, Int Y, Int Alpha)
{
    SetFont(Sprite);
    HUDMessage(s:"A"; HUDMSG_FADEOUT|HUDMSG_NOTWITHFULLMAP|HUDMSG_ALPHA, ID, CR_UNTRANSLATED, X, Y, 0.029, 0.25, Alpha);
    Return True;
}



Script "Hook_HitWall" (void)
{
    Int HTID = GetActivatorTID ();
    Int StoredPlayer_TID;
    SetActivatorToTarget(HTID); // Should be the player, unless something went horribly wrong
    
    If (ActivatorTID() != 0)
    {
        StoredPlayer_TID = ActivatorTID();
        Thing_ChangeTID (ActivatorTID(), UniqueTID());
    }
    Int PTID = GetActivatorTID ();
    
    Int f_Distance = Distance (HTID, PTID);
    Int b_Angle = ByteAngle (HTID, PTID);
    Int ZHeight = (ZDistance(PTID, HTID) + 0.5) >> 16;
    ThrustThing (b_Angle, f_Distance/4, false, PTID);
    If(f_Distance >128)
    {
       ThrustThingZ (PTID, (ZHeight/6), 1,0 );
    }
  else
  {
    ThrustThingZ (PTID, (ZHeight/4), 1,0);
  }
    If (StoredPlayer_TID != 0)
    {
        SetActivator(PTID);
        Thing_ChangeTID(PTID, StoredPlayer_TID);
    }
}

script "Health_Checker" ENTER 
{


int percent = GetActorProperty(0, APROP_HEALTH)*100/100;

    if (GameType () != GAME_TITLE_MAP)
  {
  If(CheckInventory("PlayingEmily")==1)
  {
  if (CheckInventory("EmilyPain") == 3)   
    {
     SetHudSize(384, 480, 0);
     SetFont("HUDPAIN"); 
     HudMessage(s:"A";HUDMSG_LAYER_UNDERHUD | HUDMSG_FADEINOUT | HUDMSG_ALPHA | HUDMSG_ADDBLEND, -12, CR_WHITE, 192.0, 240.0, 0.0, 0.25,0.25,0.5);
    }
if (CheckInventory("EmilyPain") == 2)   
    {
     SetHudSize(384, 480, 0);
     SetFont("HUDPAIN"); 
     HudMessage(s:"A";HUDMSG_LAYER_UNDERHUD | HUDMSG_FADEINOUT | HUDMSG_ALPHA | HUDMSG_ADDBLEND, -13, CR_WHITE, 192.0, 240.0, 0.0, 0.25,0.25,0.6);
    }
if (CheckInventory("EmilyPain") == 1)   
    {
     SetHudSize(384, 480, 0);
     SetFont("HUDPAIN"); 
     HudMessage(s:"A";HUDMSG_LAYER_UNDERHUD | HUDMSG_FADEINOUT | HUDMSG_ALPHA | HUDMSG_ADDBLEND, -14, CR_WHITE, 192.0, 240.0, 0.0, 0.25,0.25,0.7);
    }
  }
  else
  {
  if (percent <= 50 && percent > 0)   
    {
     SetHudSize(384, 480, 0);
     SetFont("HUDPAIN"); 
     HudMessage(s:"A";HUDMSG_LAYER_UNDERHUD | HUDMSG_FADEINOUT | HUDMSG_ALPHA | HUDMSG_ADDBLEND, -12, CR_WHITE, 192.0, 240.0, 0.0, 0.25,0.25,0.3);
    }
if (percent <= 40 && percent > 0)   
    {
     SetHudSize(384, 480, 0);
     SetFont("HUDPAIN"); 
     HudMessage(s:"A";HUDMSG_LAYER_UNDERHUD | HUDMSG_FADEINOUT | HUDMSG_ALPHA | HUDMSG_ADDBLEND, -13, CR_WHITE, 192.0, 240.0, 0.0, 0.25,0.25,0.3);
    }
if (percent <= 30 && percent > 0)   
    {
     SetHudSize(384, 480, 0);
     SetFont("HUDPAIN"); 
     HudMessage(s:"A";HUDMSG_LAYER_UNDERHUD | HUDMSG_FADEINOUT | HUDMSG_ALPHA | HUDMSG_ADDBLEND, -14, CR_WHITE, 192.0, 240.0, 0.0, 0.25,0.25,0.3);
    }
  }
  }
  delay(35);
    restart; 
}

script "Health_Regen" (void)
{
int percent = GetActorProperty(0, APROP_HEALTH)*100/100;

if(GetActorProperty(0, APROP_HEALTH) == 100 || CheckInventory("PlayingCatty")==0)
{
terminate;
}
else
{
GiveInventory("Healthregen",1);
delay(35);
}

restart;
}